import logging
import random
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN, BOT_NAME, BOT_DESCRIPTION, YES_ANSWERS, NO_ANSWERS, THINKING_EMOJIS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SosalMeterBot:
    def __init__(self):
        pass
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
        welcome_text = f"""
üîÆ **–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ {BOT_NAME}!** üîÆ

{BOT_DESCRIPTION}

**–Ø–∫ –≥—Ä–∞—Ç–∏:**
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "Sosal ?"
2. –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –º–∞–≥—ñ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –î–æ–≤—ñ–¥–∫–∞

üéØ **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!**
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÆ Sosal ?", callback_data="ask_sosal")],
            [InlineKeyboardButton("‚ùì –î–æ–≤—ñ–¥–∫–∞", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
        help_text = f"""
üìö **–î–æ–≤—ñ–¥–∫–∞ –ø–æ {BOT_NAME}**

**–Ø–∫ –≥—Ä–∞—Ç–∏:**
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "Sosal ?"
2. –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –º–∞–≥—ñ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "Sosal ?"
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç—å "–¢–∞–∫" –∞–±–æ "–ù—ñ"
‚Ä¢ –¶–µ –≥—Ä–∞ –¥–ª—è —Ä–æ–∑–≤–∞–≥–∏, –Ω–µ —Å–ø—Ä–∏–π–º–∞–π—Ç–µ —Å–µ—Ä–π–æ–∑–Ω–æ

üéØ **–ì–∞—Ä–Ω–æ—ó –≥—Ä–∏!**
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "ask_sosal":
            # –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é "–¥—É–º–∞—î"
            await query.edit_message_text(
                f"üîÆ **Sosal ?**\n\n"
                f"{random.choice(THINKING_EMOJIS)} –î—É–º–∞—é...",
                parse_mode='Markdown'
            )
            
            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –µ—Ñ–µ–∫—Ç—É
            await asyncio.sleep(2)
            
            # –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å (50/50)
            is_yes = random.choice([True, False])
            if is_yes:
                answer = random.choice(YES_ANSWERS)
            else:
                answer = random.choice(NO_ANSWERS)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–ø–∏—Ç–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="ask_sosal")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üîÆ **Sosal ?**\n\n"
                f"üéØ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:** {answer}\n\n"
                f"‚ú® **–ú–∞–≥—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        
        elif query.data == "help":
            help_text = f"""
üìö **–î–æ–≤—ñ–¥–∫–∞ –ø–æ {BOT_NAME}**

**–Ø–∫ –≥—Ä–∞—Ç–∏:**
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "Sosal ?"
2. –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –º–∞–≥—ñ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

**–ü—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "Sosal ?"
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç—å "–¢–∞–∫" –∞–±–æ "–ù—ñ"
‚Ä¢ –¶–µ –≥—Ä–∞ –¥–ª—è —Ä–æ–∑–≤–∞–≥–∏, –Ω–µ —Å–ø—Ä–∏–π–º–∞–π—Ç–µ —Å–µ—Ä–π–æ–∑–Ω–æ

üéØ **–ì–∞—Ä–Ω–æ—ó –≥—Ä–∏!**
            """
            keyboard = [
                [InlineKeyboardButton("üîÆ Sosal ?", callback_data="ask_sosal")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(help_text, parse_mode='Markdown', reply_markup=reply_markup)
        
        elif query.data == "start":
            welcome_text = f"""
üîÆ **–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ {BOT_NAME}!** üîÆ

{BOT_DESCRIPTION}

**–Ø–∫ –≥—Ä–∞—Ç–∏:**
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "Sosal ?"
2. –ü—Ä–æ–≥—Ä–∞–º–∞ —Å–∞–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –º–∞–≥—ñ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!

üéØ **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!**
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÆ Sosal ?", callback_data="ask_sosal")],
                [InlineKeyboardButton("‚ùì –î–æ–≤—ñ–¥–∫–∞", callback_data="help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_TOKEN –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –≤ config.py")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    sosal_bot = SosalMeterBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", sosal_bot.start))
    application.add_handler(CommandHandler("help", sosal_bot.help_command))
    application.add_handler(CallbackQueryHandler(sosal_bot.handle_callback))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(sosal_bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print(f"üîÆ –ó–∞–ø—É—Å–∫ {BOT_NAME}...")
    application.run_polling()

if __name__ == '__main__':
    main()
