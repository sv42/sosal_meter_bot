import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from code_executor import CodeExecutor
from config import BOT_TOKEN, SUPPORTED_LANGUAGES

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CodeBot:
    def __init__(self):
        self.executor = CodeExecutor()
        self.user_languages = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
        welcome_text = """
ü§ñ **–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Code Executor Bot!**

–¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∫–æ–¥ –Ω–∞ Python.

**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/start - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/help - –î–æ–≤—ñ–¥–∫–∞
/language - –í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
/run - –í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–¥

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1. –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /language
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ –≤ –±–ª–æ—Ü—ñ ``` –∞–±–æ –∑–≤–∏—á–∞–π–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
3. –ë–æ—Ç –≤–∏–∫–æ–Ω–∞—î –∫–æ–¥ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

**–ü—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É:**
```python
print("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")
for i in range(3):
    print(f"–ß–∏—Å–ª–æ: {i}")
```

**–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:**
‚Ä¢ Python üêç
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
        help_text = """
üìö **–î–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –±–æ—Ç–∞**

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/language - –í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
/run - –í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–¥

**–Ø–∫ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫–æ–¥:**

**–°–ø–æ—Å—ñ–± 1 - –í –±–ª–æ—Ü—ñ ``` (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ):**
```python
print("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")
for i in range(5):
    print(f"–ß–∏—Å–ª–æ: {i}")
```

**–°–ø–æ—Å—ñ–± 2 - –ó–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç:**
print("–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")
for i in range(5):
    print(f"–ß–∏—Å–ª–æ: {i}")

**–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –±–ª–æ–∫–∏:**
‚Ä¢ ```python``` - –¥–ª—è Python
‚Ä¢ ```py``` - —Å–∫–æ—Ä–æ—á–µ–Ω–æ –¥–ª—è Python  
‚Ä¢ ``` ``` - –∑–∞–≥–∞–ª—å–Ω–∏–π –±–ª–æ–∫

**–û–±–º–µ–∂–µ–Ω–Ω—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10,000 —Å–∏–º–≤–æ–ª—ñ–≤ –∫–æ–¥—É
‚Ä¢ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: 10 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4,000 —Å–∏–º–≤–æ–ª—ñ–≤ –≤–∏–≤–æ–¥—É
‚Ä¢ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó

**–ë–µ–∑–ø–µ–∫–∞:**
–ë–æ—Ç –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∫–æ–¥—É.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /language"""
        keyboard = []
        for lang_code, lang_info in SUPPORTED_LANGUAGES.items():
            keyboard.append([InlineKeyboardButton(
                f"{lang_info['name']} {self._get_lang_emoji(lang_code)}",
                callback_data=f"lang_{lang_code}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:",
            reply_markup=reply_markup
        )
    
    async def language_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("lang_"):
            language = query.data[5:]  # –í–∏–¥–∞–ª—è—î–º–æ "lang_"
            user_id = query.from_user.id
            
            if language in SUPPORTED_LANGUAGES:
                self.user_languages[user_id] = language
                lang_name = SUPPORTED_LANGUAGES[language]['name']
                emoji = self._get_lang_emoji(language)
                
                await query.edit_message_text(
                    f"‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {lang_name} {emoji}\n\n"
                    f"–¢–µ–ø–µ—Ä –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –∫–æ–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è!"
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è")
    
    async def run_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /run"""
        user_id = update.from_user.id
        
        if user_id not in self.user_languages:
            await update.message.reply_text(
                "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /language"
            )
            return
        
        await update.message.reply_text(
            "üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. "
            f"–ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞: {SUPPORTED_LANGUAGES[self.user_languages[user_id]]['name']}"
        )
    
    async def handle_code_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–æ–¥–æ–º"""
        user_id = update.message.from_user.id
        
        if user_id not in self.user_languages:
            await update.message.reply_text(
                "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /language"
            )
            return
        
        text = update.message.text
        language = self.user_languages[user_id]
        lang_name = SUPPORTED_LANGUAGES[language]['name']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ–¥ –≤ –±–ª–æ—Ü—ñ ``` ```
        code = self._extract_code_from_message(text, language)
        
        if not code:
            await update.message.reply_text(
                "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.\n\n"
                "üí° **–Ø–∫ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫–æ–¥:**\n"
                "1. –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∫–æ–º–∞–Ω–¥–æ—é /language\n"
                "2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ –≤ –±–ª–æ—Ü—ñ:\n"
                "```python\n"
                "print('–ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!')\n"
                "for i in range(3):\n"
                "    print(f'–ß–∏—Å–ª–æ: {i}')\n"
                "```\n"
                "3. –ê–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–¥ –±–µ–∑ –±–ª–æ–∫—É"
            )
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ, —â–æ –±–æ—Ç –æ–±—Ä–æ–±–ª—è—î –∫–æ–¥
        processing_msg = await update.message.reply_text(
            f"üîÑ –í–∏–∫–æ–Ω—É—é {lang_name} –∫–æ–¥...\n"
            f"```{language}\n{code[:100]}{'...' if len(code) > 100 else ''}\n```",
            parse_mode='Markdown'
        )
        
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–¥
            success, output, error = await self.executor.execute_code(code, language)
            
            # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            if success:
                if output.strip():
                    result_text = f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è {lang_name}:**\n```\n{output}\n```"
                else:
                    result_text = f"‚úÖ **–ö–æ–¥ {lang_name} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!**\n(–ù–µ–º–∞—î –≤–∏–≤–æ–¥—É)"
            else:
                # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –¥–ª—è –ø–æ–º–∏–ª–æ–∫ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤
                if "IndentationError" in error:
                    result_text = f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ {lang_name}:**\n```\n{error}\n```\n\nüí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–¥—Å—Ç—É–ø–∏ –≤ –∫–æ–¥—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 4 –ø—Ä–æ–±—ñ–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –≤—ñ–¥—Å—Ç—É–ø—É."
                else:
                    result_text = f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è {lang_name}:**\n```\n{error}\n```"
            
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if len(result_text) > 4000:
                result_text = result_text[:4000] + "\n... (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä—ñ–∑–∞–Ω–æ)"
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.delete()
            await update.message.reply_text(result_text, parse_mode='Markdown')
            
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞:** {str(e)}")
    
    def _extract_code_from_message(self, text: str, language: str) -> str:
        """–í–∏—Ç—è–≥—É—î –∫–æ–¥ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ –±–ª–æ–∫–∏ ``` —Ç–∞ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç"""
        import re
        
        # –®—É–∫–∞—î–º–æ –∫–æ–¥ –≤ –±–ª–æ–∫–∞—Ö ``` ```
        # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: ```python, ```py, ```, ```{language}
        patterns = [
            rf'```{language}\s*\n(.*?)\n```',
            rf'```py\s*\n(.*?)\n```',
            rf'```\s*\n(.*?)\n```',
            rf'```{language}\s*(.*?)```',
            rf'```py\s*(.*?)```',
            rf'```\s*(.*?)```'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
            if match:
                code = match.group(1).strip()
                if code:
                    return code
        
        # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–ª–æ–∫—ñ–≤ ```, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç - —Ü–µ –∫–æ–¥
        # (—è–∫—â–æ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ Python)
        python_keywords = ['print(', 'def ', 'if ', 'for ', 'while ', 'import ', 'class ', 'return ']
        if any(keyword in text for keyword in python_keywords):
            return text.strip()
        
        return ""
    
    def _get_lang_emoji(self, language: str) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –¥–ª—è –º–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"""
        emojis = {
            'python': 'üêç',
            'ruby': 'üíé'
        }
        return emojis.get(language, 'üìù')
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_TOKEN –≤ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –≤ config.py")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    code_bot = CodeBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", code_bot.start))
    application.add_handler(CommandHandler("help", code_bot.help_command))
    application.add_handler(CommandHandler("language", code_bot.language_selection))
    application.add_handler(CommandHandler("run", code_bot.run_code))
    application.add_handler(CallbackQueryHandler(code_bot.language_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, code_bot.handle_code_message))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(code_bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("ü§ñ –ó–∞–ø—É—Å–∫ Code Executor Bot...")
    application.run_polling()

if __name__ == '__main__':
    main()
